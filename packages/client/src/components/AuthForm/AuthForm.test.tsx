import {
  AuthForm,
  AuthFormProps,
} from './AuthForm';
import { authController } from '@controllers/AuthController';
import {
  render,
  screen,
  fireEvent,
} from '@testing-library/react';
import { MemoryRouter } from 'react-router-dom';

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
global.fetch = jest.fn(() =>
  Promise.resolve({
    json: () => Promise.resolve('hey'),
  })
);

const renderAuthForm = (props: AuthFormProps) => {
  return render(
    <MemoryRouter>
      <AuthForm {...props} />
    </MemoryRouter>
  );
};

describe('SignIn', () => {
  test('renders AuthForm correctly with signin type', async () => {
    renderAuthForm({ authType: 'signin' });

    expect(
      screen.getByText('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è')
    ).toBeDefined();
    expect(
      screen.getByLabelText('–õ–æ–≥–∏–Ω')
    ).toBeDefined();
    expect(
      screen.getByLabelText('–ü–∞—Ä–æ–ª—å')
    ).toBeDefined();
    expect(
      screen.getByText('–í–æ–π—Ç–∏')
    ).toBeDefined();
    expect(
      screen.getByText('–ï—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã?')
    ).toBeDefined();
  });

  test('displays error message on incorrect input', async () => {
    renderAuthForm({ authType: 'signin' });

    fireEvent.change(
      screen.getByLabelText('–õ–æ–≥–∏–Ω'),
      {
        target: { value: '1' },
      }
    );

    expect(
      screen.getByText(
        '–ö–∞–∂–µ—Ç—Å—è, –≤—ã –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ –ª–æ–≥–∏–Ω :('
      )
    ).toBeDefined();
  });

  test('handles sign in form submission', async () => {
    const signinMock = jest.spyOn(
      authController,
      'signin'
    );
    renderAuthForm({ authType: 'signin' });

    fireEvent.change(
      screen.getByLabelText('–õ–æ–≥–∏–Ω'),
      {
        target: { value: 'example' },
      }
    );
    fireEvent.change(
      screen.getByLabelText('–ü–∞—Ä–æ–ª—å'),
      {
        target: { value: 'password' },
      }
    );

    fireEvent.click(screen.getByText('–í–æ–π—Ç–∏'));

    expect(signinMock).toHaveBeenCalledWith({
      login: 'example',
      password: 'password',
    });
  });
});

describe('SignUp', () => {
  test('renders AuthForm correctly with signup type', async () => {
    renderAuthForm({ authType: 'signup' });

    expect(
      screen.getByText('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
    ).toBeDefined();
    expect(
      screen.getByLabelText('–ü–æ—á—Ç–∞')
    ).toBeDefined();
    expect(
      screen.getByLabelText('–õ–æ–≥–∏–Ω')
    ).toBeDefined();
    expect(
      screen.getByLabelText('–ò–º—è')
    ).toBeDefined();
    expect(
      screen.getByLabelText('–§–∞–º–∏–ª–∏—è')
    ).toBeDefined();
    expect(
      screen.getByLabelText('–¢–µ–ª–µ—Ñ–æ–Ω')
    ).toBeDefined();
    expect(
      screen.getByLabelText('–ü–∞—Ä–æ–ª—å')
    ).toBeDefined();
    expect(
      screen.getByLabelText('–ï—â–µ —Ä–∞–∑ –ø–∞—Ä–æ–ª—å')
    ).toBeDefined();
    expect(
      screen.getByText('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è')
    ).toBeDefined();
    expect(
      screen.getByText('–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç?')
    ).toBeDefined();
  });

  test('displays error message on incorrect input', async () => {
    renderAuthForm({ authType: 'signup' });

    fireEvent.change(
      screen.getByLabelText('–ü–æ—á—Ç–∞'),
      {
        target: { value: '1' },
      }
    );
    fireEvent.change(
      screen.getByLabelText('–õ–æ–≥–∏–Ω'),
      {
        target: { value: '1' },
      }
    );
    fireEvent.change(
      screen.getByLabelText('–ò–º—è'),
      {
        target: { value: '1' },
      }
    );
    fireEvent.change(
      screen.getByLabelText('–§–∞–º–∏–ª–∏—è'),
      {
        target: { value: '1' },
      }
    );
    fireEvent.change(
      screen.getByLabelText('–¢–µ–ª–µ—Ñ–æ–Ω'),
      {
        target: { value: '1' },
      }
    );
    fireEvent.change(
      screen.getByLabelText('–ü–∞—Ä–æ–ª—å'),
      {
        target: { value: '1' },
      }
    );
    fireEvent.change(
      screen.getByLabelText('–ï—â–µ —Ä–∞–∑ –ø–∞—Ä–æ–ª—å'),
      {
        target: { value: '2' },
      }
    );

    expect(
      screen.getByText(
        '–ö–∞–∂–µ—Ç—Å—è, –≤—ã –æ—à–∏–±–ª–∏—Å—å –≤ –∞–¥—Ä–µ—Å–µ üò± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –µ—â–µ —Ä–∞–∑!'
      )
    ).toBeDefined();
    expect(
      screen.getByText(
        '–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ª–æ–≥–∏–Ω—É: –æ—Ç 3 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤, –ª–∞—Ç–∏–Ω–∏—Ü–∞, –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ü–∏—Ñ—Ä—ã, –Ω–æ –Ω–µ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –Ω–∏—Ö, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤, –±–µ–∑ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ (–¥–æ–ø—É—Å—Ç–∏–º—ã –¥–µ—Ñ–∏—Å –∏ –Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ)'
      )
    ).toBeDefined();
    expect(
      screen.getByText(
        '–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: –ª–∞—Ç–∏–Ω–∏—Ü–∞ –∏–ª–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü–∞, –ø–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–≥–ª–∞–≤–Ω–æ–π, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –±–µ–∑ —Ü–∏—Ñ—Ä, –Ω–µ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ (–¥–æ–ø—É—Å—Ç–∏–º —Ç–æ–ª—å–∫–æ –¥–µ—Ñ–∏—Å)'
      )
    ).toBeDefined();
    expect(
      screen.getByText(
        '–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: –æ—Ç 10 –¥–æ 15 —Å–∏–º–≤–æ–ª–æ–≤, —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —Ü–∏—Ñ—Ä, –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø–ª—é—Å–∞'
      )
    ).toBeDefined();
    expect(
      screen.getByText(
        '–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: –æ—Ç 7 –¥–æ 40 —Å–∏–º–≤–æ–ª–æ–≤, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∑–∞–≥–ª–∞–≤–Ω–∞—è –±—É–∫–≤–∞ –∏ —Ü–∏—Ñ—Ä–∞'
      )
    ).toBeDefined();
    expect(
      screen.getByText('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç')
    ).toBeDefined();
  });

  test('handles sign up form submission', async () => {
    const signupMock = jest.spyOn(
      authController,
      'signup'
    );
    renderAuthForm({ authType: 'signup' });

    fireEvent.change(
      screen.getByLabelText('–ü–æ—á—Ç–∞'),
      {
        target: { value: 'test@example.com' },
      }
    );
    fireEvent.change(
      screen.getByLabelText('–õ–æ–≥–∏–Ω'),
      {
        target: { value: 'testuser' },
      }
    );
    fireEvent.change(
      screen.getByLabelText('–ò–º—è'),
      {
        target: { value: 'John' },
      }
    );
    fireEvent.change(
      screen.getByLabelText('–§–∞–º–∏–ª–∏—è'),
      {
        target: { value: 'Doe' },
      }
    );
    fireEvent.change(
      screen.getByLabelText('–¢–µ–ª–µ—Ñ–æ–Ω'),
      {
        target: { value: '1234567890' },
      }
    );
    fireEvent.change(
      screen.getByLabelText('–ü–∞—Ä–æ–ª—å'),
      {
        target: { value: 'password' },
      }
    );
    fireEvent.change(
      screen.getByLabelText('–ï—â–µ —Ä–∞–∑ –ø–∞—Ä–æ–ª—å'),
      {
        target: { value: 'password' },
      }
    );

    fireEvent.click(
      screen.getByText('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è')
    );

    expect(signupMock).toHaveBeenCalledWith({
      email: 'test@example.com',
      login: 'testuser',
      first_name: 'John',
      second_name: 'Doe',
      phone: '1234567890',
      password: 'password',
      password_confirm: 'password',
    });
  });
});
