import {
  Button,
  ButtonProps,
} from '@components/Button';
import {
  Input,
  InputProps,
} from '@components/Input';
import './AuthForm.scss';
import { FormEvent, useId } from 'react';
import { ROUTES } from '@routers/routes';
import { validate } from '@service/Validate';

export type AuthFormProps = {
  authType: 'signup' | 'signin';
  handleSubmit: (
    event: FormEvent<HTMLFormElement>
  ) => void;
};

export const AuthForm = ({
  authType,
  handleSubmit,
}: AuthFormProps) => {
  const title =
    authType === 'signin'
      ? '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
      : '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è';

  const signInInputs: InputProps[] = [
    {
      name: 'login',
      labelText: '–õ–æ–≥–∏–Ω',
      errorText:
        '–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ª–æ–≥–∏–Ω—É: –æ—Ç 3 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤, –ª–∞—Ç–∏–Ω–∏—Ü–∞, –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ü–∏—Ñ—Ä—ã, –Ω–æ –Ω–µ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –Ω–∏—Ö, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤, –±–µ–∑ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ (–¥–æ–ø—É—Å—Ç–∏–º—ã –¥–µ—Ñ–∏—Å –∏ –Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ)',
      validator: validate.login,
    },
    {
      name: 'password',
      type: 'password',
      labelText: '–ü–∞—Ä–æ–ª—å',
    },
  ];

  const signInButtons: ButtonProps[] = [
    {
      children: '–í–æ–π—Ç–∏',
      id: useId(),
    },
    {
      children: '–ï—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã?',
      id: useId(),
      to: ROUTES.SignUp.path,
      view: 'subButton',
    },
  ];

  const signUpInputs: InputProps[] = [
    {
      name: 'email',
      labelText: '–ü–æ—á—Ç–∞',
      errorText:
        '–ö–∞–∂–µ—Ç—Å—è, –≤—ã –æ—à–∏–±–ª–∏—Å—å –≤ –∞–¥—Ä–µ—Å–µ üò± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –µ—â–µ —Ä–∞–∑!',
      validator: validate.email,
    },
    {
      name: 'login',
      labelText: '–õ–æ–≥–∏–Ω',
      errorText:
        '–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ª–æ–≥–∏–Ω—É: –æ—Ç 3 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤, –ª–∞—Ç–∏–Ω–∏—Ü–∞, –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ü–∏—Ñ—Ä—ã, –Ω–æ –Ω–µ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –Ω–∏—Ö, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤, –±–µ–∑ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ (–¥–æ–ø—É—Å—Ç–∏–º—ã –¥–µ—Ñ–∏—Å –∏ –Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ)',
      validator: validate.login,
    },
    {
      name: 'first_name',
      labelText: '–ò–º—è',
      errorText:
        '–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: –ª–∞—Ç–∏–Ω–∏—Ü–∞ –∏–ª–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü–∞, –ø–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–≥–ª–∞–≤–Ω–æ–π, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –±–µ–∑ —Ü–∏—Ñ—Ä, –Ω–µ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ (–¥–æ–ø—É—Å—Ç–∏–º —Ç–æ–ª—å–∫–æ –¥–µ—Ñ–∏—Å)',
      validator: validate.name,
    },
    {
      name: 'second_name',
      labelText: '–§–∞–º–∏–ª–∏—è',
      errorText:
        '–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: –ª–∞—Ç–∏–Ω–∏—Ü–∞ –∏–ª–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü–∞, –ø–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–≥–ª–∞–≤–Ω–æ–π, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –±–µ–∑ —Ü–∏—Ñ—Ä, –Ω–µ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ (–¥–æ–ø—É—Å—Ç–∏–º —Ç–æ–ª—å–∫–æ –¥–µ—Ñ–∏—Å)',
      validator: validate.name,
    },
    {
      name: 'phone',
      labelText: '–¢–µ–ª–µ—Ñ–æ–Ω',
      errorText:
        '–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: –æ—Ç 10 –¥–æ 15 —Å–∏–º–≤–æ–ª–æ–≤, —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —Ü–∏—Ñ—Ä, –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø–ª—é—Å–∞',
      validator: validate.phone,
    },
    {
      name: 'password',
      type: 'password',
      labelText: '–ü–∞—Ä–æ–ª—å',
      errorText:
        '–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: –æ—Ç 7 –¥–æ 40 —Å–∏–º–≤–æ–ª–æ–≤, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∑–∞–≥–ª–∞–≤–Ω–∞—è –±—É–∫–≤–∞ –∏ —Ü–∏—Ñ—Ä–∞',
      validator: validate.password,
    },
    {
      name: 'password_confirm',
      type: 'password',
      labelText: '–ï—â–µ —Ä–∞–∑ –ø–∞—Ä–æ–ª—å',
      validator: validate.passwordConfirm,
    },
  ];

  const signUpButtons: ButtonProps[] = [
    {
      children: '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è',
      id: useId(),
    },
    {
      children: '–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç?',
      id: useId(),
      to: ROUTES.SignIn.path,
      view: 'subButton',
    },
  ];

  const inputs =
    authType === 'signin'
      ? signInInputs
      : signUpInputs;

  const buttons =
    authType === 'signin'
      ? signInButtons
      : signUpButtons;

  return (
    <div className="authBoxWrapper">
      <form
        className="authBox"
        onSubmit={handleSubmit}>
        <h1 className="authBoxHeader">{title}</h1>
        {inputs.map(inputProps => (
          <Input
            key={inputProps.name}
            {...inputProps}
          />
        ))}

        {buttons.map(buttonProps => (
          <Button
            key={buttonProps.id}
            {...buttonProps}
          />
        ))}
      </form>
    </div>
  );
};
